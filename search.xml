<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JDBC学习笔记 (MySQL)</title>
    <url>/2020/10/16/JDBC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-MySQL/</url>
    <content><![CDATA[<h1 id="Java连接MySQL数据库"><a href="#Java连接MySQL数据库" class="headerlink" title="Java连接MySQL数据库"></a>Java连接MySQL数据库</h1><a id="more"></a>

<h1 id="什么是JDBC？"><a href="#什么是JDBC？" class="headerlink" title="什么是JDBC？"></a>什么是JDBC？</h1><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>Java Database Connectivity（Java语言链接数据库）<br>JDBC的本质是什么？<br>　JDBC是SUN公司定制的一套接口（interface）<br>　接口都有调用者和实现者<br>　面向接口调用、面向接口实现类，这都属于面向接口编程</p>
<h1 id="JDBC编程六步"><a href="#JDBC编程六步" class="headerlink" title="JDBC编程六步"></a>JDBC编程六步</h1><p>第一步：注册驱动（连接所选择的数据库）<br>第二步：获取连接（JVM的进程和数据库进程之间的通道打开）<br>第三步：获取数据库操作对象（专门执行sql语句的对象）<br>第四步：执行SQL语句（DQL、DML…）<br>第五步：处理查询结果集（只有当第四步执行的是select语句的时候，才有这一步）<br>第六步：释放资源</p>
<p>注意：查询结果集的方法是 <strong>数据库对象.next()</strong> 判断将要查找的下一位是否存在，若存在就返回true，不存在就返回false，可以使用while循环判断。类似于指针，或迭代器。</p>
<h2 id="第一种创建数据库对象的方法：Statement"><a href="#第一种创建数据库对象的方法：Statement" class="headerlink" title="第一种创建数据库对象的方法：Statement"></a>第一种创建数据库对象的方法：Statement</h2><p>代码实例：<br>这里用到了资源绑定器，方便修改数据库信息<br>jdbc.properties</p>
<p>这种方法可能会导致<strong>SQL注入</strong><br>根本原因是？<br>用户输入的信息中含有sql语句的关键字，这些关键字参与sql语句的编译过程，<br>导致sql语句原意被扭曲</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/mywork1?serverTimezone=UTC</span></span><br><span class="line">user=root</span><br><span class="line">password=xxxxx</span><br><span class="line"><span class="number">1234</span></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">实际开发中不建议把连接数据库的信息写死到java程序中。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//查询结果集</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用资源绑定器绑定配置文件</span></span><br><span class="line">        ResourceBundle bundle=ResourceBundle.getBundle(<span class="string">&quot;jdbc&quot;</span>);</span><br><span class="line">        String driver=bundle.getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        String url=bundle.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        String user=bundle.getString(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        String password=bundle.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Connection connection=<span class="keyword">null</span>;</span><br><span class="line">        Statement statement=<span class="keyword">null</span>;</span><br><span class="line">        ResultSet resultSet=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1、注册驱动(常用方式)</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            <span class="comment">//2、连接</span></span><br><span class="line">            connection= DriverManager.getConnection(url,user,password);</span><br><span class="line">            <span class="comment">//3、创建数据库对象</span></span><br><span class="line">            statement=connection.createStatement();</span><br><span class="line">            <span class="comment">//4、执行SQL语句(查询结果集)</span></span><br><span class="line">            String sql=<span class="string">&quot;select empno,ename,sal from emp&quot;</span>;</span><br><span class="line">            <span class="comment">//5、查询结果集</span></span><br><span class="line">            <span class="comment">//专门执行DQL语句的语法，用executeQuery()，返回值ResultSet</span></span><br><span class="line">            resultSet=statement.executeQuery(sql);</span><br><span class="line">            <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">                <span class="comment">//取数据</span></span><br><span class="line">                <span class="comment">//getString()方法的特点：不管数据库中数据类型是什么，都以String返回</span></span><br><span class="line">                String empno=resultSet.getString(<span class="number">1</span>);<span class="comment">//JDBC中所有下标从1开始</span></span><br><span class="line">                String ename=resultSet.getString(<span class="number">2</span>);<span class="comment">//第二列</span></span><br><span class="line">                String sal=resultSet.getString(<span class="string">&quot;sal&quot;</span>);<span class="comment">//第三列(可以写列名)</span></span><br><span class="line">                System.out.println(empno+<span class="string">&quot;,&quot;</span>+ename+<span class="string">&quot;,&quot;</span>+sal);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">//6、释放资源</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//释放查询结果集</span></span><br><span class="line">                <span class="keyword">if</span>(resultSet!=<span class="keyword">null</span>)</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//释放数据库操作对象</span></span><br><span class="line">                <span class="keyword">if</span>(statement!=<span class="keyword">null</span>)</span><br><span class="line">                    statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//释放连接</span></span><br><span class="line">                <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)</span><br><span class="line">                    connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ol>
<li>查询结果集执行DQL语句的语法，用executeQuery()，返回值类型ResultSet</li>
<li>增删改执行DML语句的语法，用executeUpdate()，返回值类型 int “影响数据库中的记录条数”</li>
<li>释放资源，遵循从小到大依次关闭，分别对其try…catch</li>
</ol>
<h2 id="第二种创建数据库对象的方法：PreparedStatement（常用）"><a href="#第二种创建数据库对象的方法：PreparedStatement（常用）" class="headerlink" title="第二种创建数据库对象的方法：PreparedStatement（常用）"></a>第二种创建数据库对象的方法：PreparedStatement（常用）</h2><p>这种方法解决SQL注入<br>只要用户提供的信息不参与SQL语句的编译过程，问题就解决了<br>使用java.sql.PreparedStatement<br>PreparedStatement接口继承了java.sql.Statement<br>PreparedStatement属于预编译的数据库对象<br>PreparedStatement的原理是：预先对SQL语句的框架进行编译，然后载个SQL语句传“值”<br>PreparedStatement效率高，编译一次，执行N次</p>
<p>例：<br>实现功能：<br>1、需求：<br>模拟用户登录功能的实现<br>2、业务描述：<br>程序运行的时候，提供一个输入的入口，可以让用户输入用户名和密码<br>用户输入用户名和密码之后，提交信息，java程序收集到用户信息<br>Java程序连接数据库验证用户名和密码是否合法<br>合法：显示登陆成功<br>不合法：登录失败<br>代码实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object Collection;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object Statement;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//初始化一个界面</span></span><br><span class="line">        Map&lt;String, String&gt; userLogin = chuShiHuaUI();</span><br><span class="line">        <span class="comment">//验证用户名和密码</span></span><br><span class="line">        Boolean loginSuccess=Login(userLogin);</span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        System.out.println(loginSuccess?<span class="string">&quot;登录成功&quot;</span>:<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userLogin 用户登录信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回true/false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Boolean <span class="title">Login</span><span class="params">(Map&lt;String, String&gt; userLogin)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//打标记</span></span><br><span class="line">        <span class="keyword">boolean</span> flag=<span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//单独定义变量</span></span><br><span class="line">        String u=userLogin.get(<span class="string">&quot;loginname&quot;</span>);</span><br><span class="line">        String p=userLogin.get(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//JDBC代码</span></span><br><span class="line">        Connection connection=<span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement pStatement=<span class="keyword">null</span>;</span><br><span class="line">        ResultSet resultSet=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1、注册驱动</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="comment">//2、获取连接</span></span><br><span class="line">            connection= DriverManager.getConnection(</span><br><span class="line">                    <span class="string">&quot;jdbc:mysql://localhost:3306/mywork1?serverTimezone=UTC&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;root&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;XXXXX&quot;</span></span><br><span class="line">            );</span><br><span class="line">            <span class="comment">//3、创建数据库对象</span></span><br><span class="line">            <span class="comment">//SQL语句框架 其中一个 ？表示一个占位符，一个 ？将来接收一个“值”</span></span><br><span class="line">            String sql=<span class="string">&quot;select * from t_user where loginname= ? and password= ? &quot;</span>;</span><br><span class="line">            pStatement=connection.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//给占位符 ？传值（第一个问号下标是1，第二个问号下标是2）</span></span><br><span class="line">            pStatement.setString(<span class="number">1</span>,u);</span><br><span class="line">            pStatement.setString(<span class="number">2</span>,p);</span><br><span class="line">            <span class="comment">//4、执行sql</span></span><br><span class="line">            resultSet=pStatement.executeQuery();</span><br><span class="line">            <span class="comment">//5、处理结果集</span></span><br><span class="line">            <span class="keyword">if</span>(resultSet.next())&#123;</span><br><span class="line">                flag=<span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//6、释放资源</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(resultSet!=<span class="keyword">null</span>)</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(pStatement!=<span class="keyword">null</span>)</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;<span class="keyword">if</span>(connection!=<span class="keyword">null</span>)</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化用户界面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户输入的用户名和密码信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title">chuShiHuaUI</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Scanner s=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;用户名：&quot;</span>);</span><br><span class="line">        String username=s.nextLine();</span><br><span class="line">        System.out.print(<span class="string">&quot;密码：&quot;</span>);</span><br><span class="line">        String password=s.nextLine();</span><br><span class="line"></span><br><span class="line">        Map&lt;String,String&gt; userLogin=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        userLogin.put(<span class="string">&quot;loginname&quot;</span>,username);</span><br><span class="line">        userLogin.put(<span class="string">&quot;password&quot;</span>,password);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userLogin;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="JDBC中的事务"><a href="#JDBC中的事务" class="headerlink" title="JDBC中的事务"></a>JDBC中的事务</h1><p>conn.setAutoCommit(false); 将自动提交机制改为手动提交<br>conn.commit(); 提交事务<br>conn.rollback(); 回滚事务</p>
<p>代码实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">JDBC中事务是自动提交的,若需要控制，则可以修改为手动提交事务</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCTest08</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn=<span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.注册驱动</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="comment">//2.创建连接</span></span><br><span class="line">            conn= DriverManager.getConnection(</span><br><span class="line">                    <span class="string">&quot;jdbc:mysql://localhost:3306/mywork1?serverTimezone=UTC&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;root&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;xxxxx&quot;</span></span><br><span class="line">            );</span><br><span class="line">            <span class="comment">//将自动提交机制改为手动提交</span></span><br><span class="line">            conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">//3.获取数据库操作对象</span></span><br><span class="line">            <span class="comment">//4.执行SQL语句</span></span><br><span class="line">            String sql=<span class="string">&quot;update t_user set loginname=?,password=?,name=? where id=?&quot;</span>;</span><br><span class="line">            ps=conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//给？传值</span></span><br><span class="line">            ps.setString(<span class="number">1</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">            ps.setString(<span class="number">2</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">            ps.setString(<span class="number">3</span>,<span class="string">&quot;ZHANGSAN&quot;</span>);</span><br><span class="line">            ps.setString(<span class="number">4</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> count = ps.executeUpdate();</span><br><span class="line">            System.out.println(count==<span class="number">1</span>?<span class="string">&quot;修改成功&quot;</span>:<span class="string">&quot;修改失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">            ps.setString(<span class="number">1</span>,<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">            ps.setString(<span class="number">2</span>,<span class="string">&quot;456&quot;</span>);</span><br><span class="line">            ps.setString(<span class="number">3</span>,<span class="string">&quot;LISI&quot;</span>);</span><br><span class="line">            ps.setString(<span class="number">4</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line">            count += ps.executeUpdate();</span><br><span class="line">            System.out.println(count==<span class="number">2</span>?<span class="string">&quot;修改成功&quot;</span>:<span class="string">&quot;修改失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            conn.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//回滚事务</span></span><br><span class="line">            <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.rollback();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//6.释放资源</span></span><br><span class="line">            <span class="keyword">if</span>(ps!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ps.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="JDBC代码简化（创建工具类）"><a href="#JDBC代码简化（创建工具类）" class="headerlink" title="JDBC代码简化（创建工具类）"></a>JDBC代码简化（创建工具类）</h1><p>创建工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">JDBC工具类，简化JDBC方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    工具类中的构造方法都是私有的</span></span><br><span class="line"><span class="comment">    因为工具类中的方法都是静态的，不需要NEW对象，直接采用类名调用</span></span><br><span class="line"><span class="comment">    防止new对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DBUtil</span><span class="params">()</span></span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态代码块在类加载时执行，并且只执行一次</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数据库连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">           <span class="keyword">return</span> DriverManager.getConnection(</span><br><span class="line">                    <span class="string">&quot;jdbc:mysql://localhost:3306/mywork1?serverTimezone=UTC&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;root&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;xxxxx&quot;</span></span><br><span class="line">            );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn 连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ps 数据库操作对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rs 结果集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn, Statement ps, ResultSet rs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ps!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ps.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类<br>1.测试DBUtil<br>2.测试模糊查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> util.DBUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.测试DBUtil</span></span><br><span class="line"><span class="comment">2.模糊查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCTest09</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn=<span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps=<span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取连接（DBUtil类加载时就注册驱动了）</span></span><br><span class="line">            conn= DBUtil.getConnection();</span><br><span class="line">            <span class="comment">//获取数据库操作对象</span></span><br><span class="line">            String sql=<span class="string">&quot;select ename from emp where ename like ?&quot;</span>;</span><br><span class="line">            ps=conn.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>,<span class="string">&quot;_A%&quot;</span>);</span><br><span class="line">            rs=ps.executeQuery();</span><br><span class="line">            <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                System.out.println(rs.getString(<span class="string">&quot;ename&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放资源</span></span><br><span class="line">            DBUtil.close(conn,ps,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JDBC</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML笔记</title>
    <url>/2020/10/15/HTML%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="HTML学习笔记"><a href="#HTML学习笔记" class="headerlink" title="HTML学习笔记"></a><strong>HTML学习笔记</strong></h1><a id="more"></a>

<h2 id="一、Web标准"><a href="#一、Web标准" class="headerlink" title="一、Web标准"></a>一、Web标准</h2><h3 id="1、为什么需要Web标准？"><a href="#1、为什么需要Web标准？" class="headerlink" title="1、为什么需要Web标准？"></a>1、为什么需要Web标准？</h3><p>浏览器不同，它们显示页面或者排版就会有些许差异，所以需要一套标准来规范。</p>
<h3 id="2、Web标准的构成"><a href="#2、Web标准的构成" class="headerlink" title="2、Web标准的构成"></a>2、Web标准的构成</h3><p>主要包括结构（Structure）、表现（Presentation）和行为（Behavior）三个方面。</p>
<table>
<thead>
<tr>
<th>标准</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>结构</td>
<td>结构用于对网页元素进行整理和分类，现阶段主要学的是HTML</td>
</tr>
<tr>
<td>表现</td>
<td>表现用于设置网页元素的版式、颜色、大小等外观样式，主要指的是CSS</td>
</tr>
<tr>
<td>行为</td>
<td>行为是指网页模型的定义及交互的编写，现阶段学的主要是JavaScript</td>
</tr>
</tbody></table>
<p>Web标准提出的最佳体验方案：结构、样式、行为相分离。</p>
<h2 id="二、HTML标签"><a href="#二、HTML标签" class="headerlink" title="二、HTML标签"></a>二、HTML标签</h2><h3 id="1、语法规范"><a href="#1、语法规范" class="headerlink" title="1、语法规范"></a>1、语法规范</h3><h4 id="1-1-基本语法概述"><a href="#1-1-基本语法概述" class="headerlink" title="1.1 基本语法概述"></a>1.1 基本语法概述</h4><ol>
<li><p>HTML标签是由尖括号包围的关键词，如：<code>&lt;html&gt;</code></p>
</li>
<li><p>HTML通常是成对出现的，如：<code>&lt;html&gt;&lt;/html&gt;</code>，称为双标签</p>
</li>
<li><p>有些特殊的是单标签，如：<code>&lt;br /&gt;</code></p>
</li>
</ol>
<h3 id="2、HTML基本结构标签"><a href="#2、HTML基本结构标签" class="headerlink" title="2、HTML基本结构标签"></a>2、HTML基本结构标签</h3><table>
<thead>
<tr>
<th>标签名</th>
<th>定义</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>&lt;html&gt;&lt;/html&gt;</code></td>
<td>HTML标签</td>
<td>根标签</td>
</tr>
<tr>
<td><code>&lt;head&gt;&lt;/head&gt;</code></td>
<td>文档的头部</td>
<td>注意在head标签中我们必须要设置的标签是title</td>
</tr>
<tr>
<td><code>&lt;title&gt;&lt;/title&gt;</code></td>
<td>文档的标题</td>
<td>让页面拥有属于自己的网页标题</td>
</tr>
<tr>
<td><code>&lt;body&gt;&lt;/body&gt;</code></td>
<td>文档的主体</td>
<td>包含文档的所有内容，页面内容基本都是放到body里面的</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>   //文档类型声明标签，当前页面是HTML5版本，必须位于第一行，它不是THML标签</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>  //lang语言种类，zh-CN为中文文档</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span>  //字符集 </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3、HTML常用标签"><a href="#3、HTML常用标签" class="headerlink" title="3、HTML常用标签"></a>3、HTML常用标签</h3><h4 id="3-1-标签语义"><a href="#3-1-标签语义" class="headerlink" title="3.1 标签语义"></a>3.1 标签语义</h4><p>简单理解为标签的含义，这个标签是用来干什么的？在合适的地方用合适的标签，可以让页面结构更加清晰。</p>
<h4 id="3-2-标题标签"><a href="#3-2-标题标签" class="headerlink" title="3.2 标题标签"></a>3.2 标题标签</h4><p>HTML提供了六个等级的标题标签，即 <code>&lt;h1&gt; ~ &lt;h6&gt;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure>



<h4 id="3-3-段落和换行标签"><a href="#3-3-段落和换行标签" class="headerlink" title="3.3 段落和换行标签"></a>3.3 段落和换行标签</h4><p>标签<code>&lt;p&gt;</code>用于定义段</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span> 用于强制换行</span><br></pre></td></tr></table></figure>



<h4 id="3-4-文本格式化标签"><a href="#3-4-文本格式化标签" class="headerlink" title="3.4 文本格式化标签"></a>3.4 文本格式化标签</h4><table>
<thead>
<tr>
<th>语义</th>
<th>标签</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>加粗</td>
<td><code>&lt;strong&gt;&lt;/strong&gt;</code>或者<code>&lt;b&gt;&lt;/b&gt;</code></td>
<td>推荐使用<code>&lt;strong&gt;</code>，语义更强烈</td>
</tr>
<tr>
<td>倾斜</td>
<td><code>&lt;em&gt;&lt;/em&gt;</code>或者<code>&lt;i&gt;&lt;/i&gt;</code></td>
<td>推荐使用<code>&lt;em&gt;</code>，语义更强烈</td>
</tr>
<tr>
<td>删除线</td>
<td><code>&lt;del&gt;&lt;/del&gt;</code>或者<code>&lt;s&gt;&lt;/s&gt;</code></td>
<td>推荐使用<code>&lt;del&gt;</code>，语义更强烈</td>
</tr>
<tr>
<td>下划线</td>
<td><code>&lt;ins&gt;&lt;/ins&gt;</code>或者<code>&lt;u&gt;&lt;/u&gt;</code></td>
<td>推荐使用<code>&lt;ins&gt;</code>，语义更强烈</td>
</tr>
</tbody></table>
<h4 id="3-5-div和span标签"><a href="#3-5-div和span标签" class="headerlink" title="3.5 div和span标签"></a>3.5 div和span标签</h4><p><code>div</code>和 <code>span</code>标签是没有语义的，它们就是一个盒子，用来装内容的。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是头部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>今天天气真好<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>div 是 division 的缩写，表示分区、分割。span意为跨度、跨距。</p>
<p>特点</p>
<ol>
<li>div 标签用来布局，但是现在一行只能放一个div，可以理解为，它是独占一行的大盒子。</li>
<li>span 标签也是用来布局的，但是一行可以有多个 span 。可以理解为小盒子。</li>
</ol>
<h4 id="3-6-图像标签img和路径"><a href="#3-6-图像标签img和路径" class="headerlink" title="3.6 图像标签img和路径"></a>3.6 图像标签img和路径</h4><p>1、它是单标签，image的缩写。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> = <span class="string">&quot;图像的URL&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>src 是 image 标签的必需属性，用于指定图像文件的路径和文件名。</p>
<p>img标签的其他属性：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>src</code></td>
<td>图片路径</td>
<td>必需属性</td>
</tr>
<tr>
<td><code>alt</code></td>
<td>文本</td>
<td>替换文本，图像不能显示的文字</td>
</tr>
<tr>
<td><code>title</code></td>
<td>文本</td>
<td>提示文本，鼠标放到图片上显示的文字</td>
</tr>
<tr>
<td><code>width</code></td>
<td>像素</td>
<td>设置图像的宽度</td>
</tr>
<tr>
<td><code>height</code></td>
<td>像素</td>
<td>设置图像的高度</td>
</tr>
<tr>
<td><code>border</code></td>
<td>像素</td>
<td>设置图像的边框粗细</td>
</tr>
</tbody></table>
<p>图像标签属性注意点：</p>
<ol>
<li>属性必须写在标签名的后面。</li>
<li>属性之间不分先后顺序，标签名与属性、属性与属性之间要以空格隔开。</li>
<li>属性采取键值对的形式：属性名 = “属性值”。</li>
</ol>
<p>2、路径</p>
<ol>
<li><p>相对路径：以引用文件所在位置为参考基础而建立的目录路径。</p>
<p>简单来说，就是图片相对于HTML页面的位置。</p>
</li>
<li><p>绝对路径</p>
<p>是指目录下的绝对路径，直接到达目标位置，通常是从盘符开始的路径。</p>
<p>例如：<code>&quot;D:\***\123.jpg&quot;</code></p>
</li>
</ol>
<table>
<thead>
<tr>
<th>相对路径分类</th>
<th>符号</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>同一级路径</td>
<td></td>
<td>图像文件位于HTML文件同一级</td>
</tr>
<tr>
<td>下一级路径</td>
<td><code>/</code></td>
<td>图像文件位于HTML文件下一级</td>
</tr>
<tr>
<td>上一级路径</td>
<td><code>../</code></td>
<td>图像文件位于HTML文件上一级</td>
</tr>
</tbody></table>
<h4 id="3-7-超链接标签"><a href="#3-7-超链接标签" class="headerlink" title="3.7 超链接标签"></a>3.7 超链接标签</h4><p><a>标签用于定义超链接，作用是从一个页面链接到另一个页面。</p>
<ol>
<li><p>语法格式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;跳转目标&quot;</span> <span class="attr">target</span> = <span class="string">&quot;目标窗口的弹出方式&quot;</span>&gt;</span>文本或图像<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>href</code>（必需属性）</td>
<td>链接目标的URL地址</td>
</tr>
<tr>
<td><code>target</code></td>
<td>用于指定目标页面的弹出方式，_self 为默认值 _blank为在新窗口中打开</td>
</tr>
</tbody></table>
</li>
<li><p>链接分类</p>
<ol>
<li><p>外部链接：地址必须以 <code>http://</code>开头。</p>
</li>
<li><p>内部链接：网站内部页面之间的相互链接，直接链接内部页面名称即可。</p>
</li>
<li><p>空链接：没有确定链接目标时</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;#&quot;</span>&gt;</span>还没想好链接到哪儿<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>下载链接：如果 href 里面地址是一个文件或者压缩包，点击就会下载这个文件。</p>
</li>
<li><p>网页元素链接：各种网页元素例如文本、图像、表格、音频等都可以添加超链接。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> = <span class="string">&quot;img.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li><p>锚点链接：点击链接可以快速定位到页面中的某个位置。</p>
<ul>
<li><p>设置链接文本的属性 href 为 <strong>#名字</strong> 的形式，如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> =<span class="string">&quot;#job&quot;</span>&gt;</span> 任职经历 <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<ul>
<li>找到目标位置标签，并添加一个 id 属性 = 上面命名的名字，如：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span> = <span class="string">&quot;job&quot;</span>&gt;</span></span><br><span class="line"> 任职经历简介</span><br><span class="line"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="3-8-表格标签"><a href="#3-8-表格标签" class="headerlink" title="3.8 表格标签"></a>3.8 表格标签</h4><ol>
<li><p>表格的主要作用</p>
<p>用于显示、展示数据，提高数据的可读性。</p>
</li>
<li><p>表格的基本语法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>这是一个单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>table用于定义表格。</p>
<ol start="2">
<li>tr 用于定义表格中的一行，必须嵌套在 table 中。</li>
<li>td 用于定义表格中的单元格，必须嵌套在 tr 中。</li>
<li>td 指的是 table data 表格数据，即数据单元格中的内容。</li>
</ol>
</li>
<li><p>表头单元格标签</p>
<p>一般位于表格的第一行或第一列，里面的文本内容会加粗居中显示。</p>
<p>th 标签表示 HTML 表格的表头部分（ table head ）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>表格属性</p>
</li>
</ol>
<p>实际开发中并不常使用，后面通过CSS来设置。</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>align</code></td>
<td>left 、center 、right</td>
<td>规定表格相对周围元素的对齐方式</td>
</tr>
<tr>
<td><code>border</code></td>
<td>1 或 “”</td>
<td>规定表格单元是否拥有边框，默认值为””，无边框</td>
</tr>
<tr>
<td><code>cellpadding</code></td>
<td>像素值</td>
<td>规定单元格内容与边框之间的空白距离，默认1像素</td>
</tr>
<tr>
<td><code>cellspacing</code></td>
<td>像素值</td>
<td>规定单元格之间的空白，默认2像素</td>
</tr>
<tr>
<td><code>width</code></td>
<td>像素值或百分比</td>
<td>规定表格的宽度</td>
</tr>
</tbody></table>
<ol>
<li>表格结构标签</li>
</ol>
<p>当表格很长时，为了更好的表示单元格的语义，可以将表格分割成表格头部和表格主体两大部分。用 thead 表示头部区域、 tbody 表示主体区域 。</p>
<ol>
<li><p>合并单元格</p>
<p>特殊情况下，把多个单元格合并成一个单元格</p>
<ol>
<li><p>合并单元格的方式</p>
<ul>
<li>跨行合并：rowspan = “合并单元格的个数”</li>
<li>跨列合并：colspan = “合并单元格的个数”</li>
</ul>
</li>
<li><p>目标单元格</p>
<ul>
<li>跨行：最上侧为目标单元格</li>
<li>跨列：最左侧为目标单元格</li>
</ul>
</li>
<li><p>合并单元格的步骤</p>
<ol>
<li>确定跨行还是跨列</li>
<li>找到目标单元格，写上 ：合并方式 = 合并单元格的数量，如:</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span> = <span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>删除多余的单元格</p>
</li>
</ol>
<h4 id="3-9-列表标签"><a href="#3-9-列表标签" class="headerlink" title="3.9 列表标签"></a>3.9 列表标签</h4><p>表格是用来显示数据的，列表是用来布局的，因为它最大的特点就是整齐有序。分为无序列表、有序列表和自定义列表。</p>
<h5 id="3-9-1-无序列表"><a href="#3-9-1-无序列表" class="headerlink" title="3.9.1 无序列表"></a>3.9.1 无序列表</h5><p>（做导航栏什么的一般用无序列表）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>标签表示HTML页面中项目的无序列表，一般会以项目符号呈现列表项，列表项用<span class="tag">&lt;<span class="name">li</span>&gt;</span>标签定义。</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ol>
<li>无序列表各个表项之间没有顺序级别之分。</li>
<li><code>&lt;ul&gt;&lt;/ul&gt;</code> 中只能嵌套 <code>&lt;li&gt;&lt;/li&gt;</code>，但是 <code>&lt;li&gt;&lt;/li&gt;</code>中可以容纳所有元素。</li>
<li>无序列表会带有自己的样式属性，但在实际使用时，通过CSS来设置。</li>
</ol>
<h5 id="3-9-2-有序列表"><a href="#3-9-2-有序列表" class="headerlink" title="3.9.2 有序列表"></a>3.9.2 有序列表</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意事项和无序列表基本一致，在实际开发中使用并不多。</p>
<h5 id="3-9-3-自定义列表"><a href="#3-9-3-自定义列表" class="headerlink" title="3.9.3 自定义列表"></a>3.9.3 自定义列表</h5><p>使用场景：常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>联系方式<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>微信<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>QQ<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ol>
<li><code>&lt;dl&gt;&lt;/dl&gt;</code>里面只能包含 <code>&lt;dt&gt;&lt;/dt&gt;</code> 和 <code>&lt;dd&gt;&lt;/dd&gt;</code></li>
<li>dt 和 dd 没有个数限制</li>
</ol>
<h4 id="3-10-表单标签"><a href="#3-10-表单标签" class="headerlink" title="3.10 表单标签"></a>3.10 表单标签</h4><p>表单的目的是为了收集用户信息。</p>
<p>在HTML中，一个完整的表单通常由表单域、表单控件（也称为表单元素）和提示信息3个部分构成。</p>
<ol>
<li><p>表单域<br>包含表单元素的区域，在HTML中，<code>&lt;form&gt;</code>标签用于定义表单域，以实现用户信息的收集和传递。<code>&lt;form&gt;</code><strong>会把它范围内的表单元素提交给服务器。</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span> = <span class="string">&quot;url地址&quot;</span> <span class="attr">method</span> = <span class="string">&quot;提交方式&quot;</span> <span class="attr">name</span> = <span class="string">&quot;表单名称&quot;</span>&gt;</span></span><br><span class="line">    各种表单元素控件</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>常用属性：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>属性值</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>action</td>
<td>url地址</td>
<td>用于指定接收并处理表单数据的服务器程序的url地址。</td>
</tr>
<tr>
<td>method</td>
<td>get/post</td>
<td>用于设置表单数据的提交方式。</td>
</tr>
<tr>
<td>name</td>
<td>名称</td>
<td>用于指定表单的名称，以区分同一个页面中的多个表单域。</td>
</tr>
</tbody></table>
<ol start="2">
<li>表单控件（表单元素）</li>
</ol>
<h5 id="lt-input-gt-表单元素"><a href="#lt-input-gt-表单元素" class="headerlink" title="&lt;input&gt;表单元素"></a><code>&lt;input&gt;</code>表单元素</h5><ul>
<li><p>type属性值：</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>button</td>
<td>定义可点击按钮（多数情况下，用于通过JavaScript启动脚本）</td>
</tr>
<tr>
<td>checkbox</td>
<td>复选框</td>
</tr>
<tr>
<td>file</td>
<td>定义输入字段和”浏览”按钮，供文件上传</td>
</tr>
<tr>
<td>hidden</td>
<td>定义隐藏的输入字段</td>
</tr>
<tr>
<td>image</td>
<td>图像形式的提交按钮</td>
</tr>
<tr>
<td>password</td>
<td>密码字段，该字段中的字符被掩码</td>
</tr>
<tr>
<td>radio</td>
<td>单选按钮</td>
</tr>
<tr>
<td>reset</td>
<td>重置按钮，会清除表单中的所有数据</td>
</tr>
<tr>
<td>submit</td>
<td>提交按钮，会把表单数据发送到服务器</td>
</tr>
<tr>
<td>text</td>
<td>单行的输入字段，可在其中输入文本，默认宽度为20个字符</td>
</tr>
</tbody></table>
</li>
<li><p>除 type 属性外，<code>&lt;input&gt;</code>标签还有其他很多属性，常用属性如下：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>name</td>
<td>自定义</td>
<td>定义input元素的名称</td>
</tr>
<tr>
<td>value</td>
<td>自定义</td>
<td>规定input元素的值</td>
</tr>
<tr>
<td>checked</td>
<td>checked</td>
<td>规定此input元素首次加载时应当被选中</td>
</tr>
<tr>
<td>maxlength</td>
<td>正整数</td>
<td>规定输入字段中的字符的最大长度</td>
</tr>
</tbody></table>
<p>注意：</p>
<ol>
<li>name 和 value 是每个表单元素都有的属性值，主要给后台人员使用。</li>
<li>name 表单元素的名字，要求 <strong>单选按钮和复选框都要有想同的 name 值</strong></li>
</ol>
</li>
</ul>
<h5 id="lt-label-gt-标签"><a href="#lt-label-gt-标签" class="headerlink" title="&lt;label&gt;标签"></a><code>&lt;label&gt;</code>标签</h5><p>为 input 元素定义标签，用于绑定一个表单元素，当点击<code>&lt;label&gt;</code>标签内的文本时，浏览器会自动将焦点（光标）转到或者选择到对应的表单元素上，用来增加用户体验。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span> = <span class="string">&quot;sex&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;radio&quot;</span> <span class="attr">name</span> = <span class="string">&quot;sex&quot;</span> <span class="attr">id</span> = <span class="string">&quot;sex&quot;</span> /&gt;</span></span><br><span class="line">12</span><br></pre></td></tr></table></figure>

<p>核心：<code>&lt;label&gt;</code>标签的 for 属性要与相关元素的 id 属性相同。</p>
<h5 id="lt-select-gt-下拉表单元素"><a href="#lt-select-gt-下拉表单元素" class="headerlink" title="&lt;select&gt;下拉表单元素"></a><code>&lt;select&gt;</code>下拉表单元素</h5><p><strong>使用场景：</strong>有多个选择项并且想要节约页面空间。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">籍贯：</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span> = <span class="string">&quot;jiguan&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>广东<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span> = <span class="string">&quot;selected&quot;</span>&gt;</span>湖南<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>浙江<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ol>
<li><code>&lt;select&gt;</code>中至少包含一对<code>&lt;option&gt;</code></li>
<li>在<code>&lt;option&gt;</code>中定义 selected = “selected” 时，选项变为默认选项</li>
</ol>
<h5 id="lt-textarea-gt-表单元素"><a href="#lt-textarea-gt-表单元素" class="headerlink" title="&lt;textarea&gt;表单元素"></a><code>&lt;textarea&gt;</code>表单元素</h5><p><strong>使用场景：</strong>当输入内容较多的情况下，可以使用<code>&lt;textarea&gt;</code>标签，常见于留言板、评论。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span> = <span class="string">&quot;3&quot;</span> <span class="attr">cols</span> = <span class="string">&quot;20&quot;</span> <span class="attr">name</span> = <span class="string">&quot;pinglun&quot;</span>&gt;</span></span><br><span class="line">    文本内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>通过<code>&lt;textarea&gt;</code>标签可以轻松地创建多行文本输入框</li>
<li>cols = “每行中的字符数” ，rows = “显示的行数”，<strong>但在实际开发中不会使用，都是用CSS来改变大小</strong></li>
</ol>
<h3 id="三、HTML中的注释和特殊字符"><a href="#三、HTML中的注释和特殊字符" class="headerlink" title="三、HTML中的注释和特殊字符"></a>三、HTML中的注释和特殊字符</h3><ol>
<li>注释</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注释语句--&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p>特殊字符</p>
<p>记住三个，其余的自行查阅：</p>
<table>
<thead>
<tr>
<th align="center">特殊字符</th>
<th>描述</th>
<th>字符的代码</th>
</tr>
</thead>
<tbody><tr>
<td align="center"></td>
<td>空格符</td>
<td>&amp; nbsp;</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td>小于号</td>
<td>&amp; lt;</td>
</tr>
<tr>
<td align="center">&gt;</td>
<td>大于号</td>
<td>&amp; gt;</td>
</tr>
</tbody></table>
</li>
</ol>
<h3 id="四、查阅文档"><a href="#四、查阅文档" class="headerlink" title="四、查阅文档"></a>四、查阅文档</h3><p><a href="http://www.w3school.com.cn/">www.w3school.com.cn</a><br><a href="https://developer.mozilla.org/zh-CN">https://developer.mozilla.org/zh-CN</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS课堂笔记</title>
    <url>/2020/10/16/CSS%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="CSS学习笔记"><a href="#CSS学习笔记" class="headerlink" title="CSS学习笔记"></a>CSS学习笔记</h1><a id="more"></a>

<h1 id="一-CSS简介"><a href="#一-CSS简介" class="headerlink" title="一 CSS简介"></a>一 CSS简介</h1><p>​       CSS(cascading style sheet，层叠样式表)是描述文档怎么样被呈现的语言，使用CSS可以对HTML文档进行描述。 </p>
<p>​       语法： ①CSS属性和值之间用冒号分隔<br>​                    ②CSS属性之间用分号分隔（建议每个属性后都书写分号）<br>​                    ③CSS的值有多个的时候使用空格分隔<br>​       </p>
<h1 id="二-CSS在网页中的使用"><a href="#二-CSS在网页中的使用" class="headerlink" title="二 CSS在网页中的使用"></a>二 CSS在网页中的使用</h1><h3 id="1-内嵌式"><a href="#1-内嵌式" class="headerlink" title="1 内嵌式"></a><strong>1 内嵌式</strong></h3><p>​         每个HTML元素都包含有一个style属性，使用该属性可以直接指定样式。如<p style=""></p> </p>
<p>​         存在问题：①.不方便修改  ②结构与显示不能很好的分离   ③建议在测试或个别情况下使用</p>
<h3 id="2-嵌入式"><a href="#2-嵌入式" class="headerlink" title="2 嵌入式"></a>2 嵌入式</h3><p>​         CSS样式定义内容位于style元素之间，其type属性必须被定义为text/css<br>​         <head><br>​           <style type="text/css">  css样式  </style> </p>
<p>​         </head></p>
<h3 id="3-外部引用时"><a href="#3-外部引用时" class="headerlink" title="3 外部引用时"></a>3 外部引用时</h3><p>​         可以在多个文档间共享样式表，提高效率；可以改变样式表而无须改变HTML文档。<br>​         <head><br>​           <link rel="stylesheet" href="url" type="text/css"><br>​           或者<br>​           <style type="text/css"><br>​             @import “style.css”;<br>​             @import url(“style.css”);<br>​           </style><br>​         </head><br>​         推荐使用第一种方式 </p>
<h1 id="三-CSS基本语法规则"><a href="#三-CSS基本语法规则" class="headerlink" title="三  CSS基本语法规则"></a>三  CSS基本语法规则</h1><h2 id="1-选择器"><a href="#1-选择器" class="headerlink" title="1 选择器"></a>1 选择器</h2><p>​       用于选择html中的元素 </p>
<h3 id="html标签选择器"><a href="#html标签选择器" class="headerlink" title="html标签选择器"></a>html标签选择器</h3><p>​         即html标签，任何一个HTML元素的标签名都可以是css的选择器。如p{   text-indent:10px} /<em>段落第一行缩进10像素</em>/   ；h1{ color:red}<br>​         优先级： ①默认情况下，子级通常先继承父级标签属性<br>​                 ②如果子级和父级拥有相同的属性，子级优先，就近原则 </p>
<p>​                 ③类选择器的优先级高于标签选择器</p>
<h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><p>​         class属性<br>​          .类名(类名不能使用数字开头，不能使用关键字来命名)  如：.rr{ color :red} </p>
<p>​          使用class属性来调用类名称<br>​              <p class="rr">one</p><br>​              <p class="rr">two</p><br>​              <p class="rr">three</p> </p>
<h3 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h3><p>​         id属性（ #id名）<br>​          #two{background-color:green}<br>​         <p class="rr">one</p><br>​         <p id="two" class="rr">two</p><br>​         <p class="rr">three</p> </p>
<h3 id="关联选择器"><a href="#关联选择器" class="headerlink" title="关联选择器"></a>关联选择器</h3><p>​         它们的优先级比单一的选择器大。<br>​         <strong>后代选择器</strong> 选择a元素里面所有后代元素中的b元素。如： a b{…}<br>​         <strong><em>\</em>子代选择器**</strong> 选择a元素里面第一代子元素中的b元素。如： a&gt;b{…} </p>
<h3 id="组合选择器"><a href="#组合选择器" class="headerlink" title="组合选择器"></a>组合选择器</h3><p>​         使用逗号,隔开选择器，可以减少样式表的重复声明。如： h1,h2,h3,h4{color:red} </p>
<h3 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h3><p>​         是指对同一个HTML元素的不同状态的一种定义方式<br>​         HTML标签:伪元素{}<br>​         a:link{}   超链接没有任何动作前的状态<br>​         a:hover{}   光标移动到超链接上的状态<br>​         a:active{}   点击超链接时的状态<br>​         a:visited{} 访问过超链接的状态<br>​         text-decoration:none 去掉下划线 </p>
<h2 id="2-选择器优先级"><a href="#2-选择器优先级" class="headerlink" title="2 选择器优先级"></a>2 选择器优先级</h2><p>​       多个CSS选择器同时作用于同一个html时，声明不同的属性具有继承的关系，如果声明的是相同的属性，则以优先级高的为主。 </p>
<p>​        <strong><em>\</em>内嵌式  &gt; 关联选择器(后代，子代，组合(且))    &gt; ID选择器    &gt; 类选择器   &gt; HTML选择器**</strong> </p>
<p>​       同级别的后者覆盖前者 <strong>，</strong> <strong><em>\</em>就近原则**</strong> </p>
<h2 id="3-样式"><a href="#3-样式" class="headerlink" title="3 样式"></a>3 样式</h2><p>​       样式是零个或多个以分号分割的【属性名：属性值】列表</p>
<h2 id="4-规则集"><a href="#4-规则集" class="headerlink" title="4 规则集"></a>4 规则集</h2><p>​       选择器 样式 </p>
<p>​       选择器{属性名:属性值;属性名:属性值}</p>
<h2 id="5-注释"><a href="#5-注释" class="headerlink" title="5 注释"></a>5 注释</h2><p>​       /*   注释内容 */</p>
<h1 id="四-CSS常见的样式属性和值"><a href="#四-CSS常见的样式属性和值" class="headerlink" title="四  CSS常见的样式属性和值"></a>四  CSS常见的样式属性和值</h1><h4 id="1-CSS-尺寸属性"><a href="#1-CSS-尺寸属性" class="headerlink" title="1 CSS 尺寸属性"></a>1 CSS 尺寸属性</h4><p>​       (注意块级元素和行内元素的区别)<br>​       height   设置元素高度。<br>​       width   设置元素的宽度。 </p>
<p><strong>2  字体属性</strong><br>     font-family字体族科<br>         宋体 SimSun<br>         黑体 SimHei<br>         微软雅黑 Microsoft YaHei<br>         微软正黑体 Microsoft JhengHei<br>         新宋体 NSimSun<br>         新细明体 PMingLiU<br>         细明体 MingLiU<br>         标楷体 DFKai-SB<br>         仿宋 FangSong<br>         仿宋_GB2312 FangSong_GB2312<br>         楷体_GB2312 KaiTi_GB2312<br>      font-size   字体大小<br>       font-style   字体风格（normal   正常;italic 斜体;oblique 倾斜）<br>       font-weight字体加粗（ normal 正常;bold 粗体;bolder 更粗;lighter 更细）<br>       text-decoration 规定添加到文本的修饰 ：<br>          none      默认。定义标准的文本。<br>          underline    定义文本下的一条线。<br>          overline    定义文本上的一条线。<br>          line-through定义穿过文本下的一条线。<br>          blink      定义闪烁的文本。 </p>
<p><strong>3  颜色</strong><br>       color   设定文本的颜色 </p>
<p>​       opacity   设置透明度（ 所有浏览器都支持 opacity 属性）</p>
<p>​       注：IE8 以及更早的版本支持替代的 filter 属性。例如：filter:Alpha(opacity=50)。  一般两个属性一起写，保证兼容性。 filter:Alpha(opacity=50);  opacity:0.5;</p>
<p><strong>4  背景</strong></p>
<p>​       background-color:#CCC；设置元素的背景颜色。 </p>
<p>​       background-image ： 设置元素的背景图像。属性值url(“1.png”);</p>
<p>​       background-repeat ： 设置是否及如何重复背景图像。<br>​         repeat    默认。背景图像将在垂直方向和水平方向重复。<br>​         repeat-x    背景图像将在水平方向重复。<br>​         repeat-y    背景图像将在垂直方向重复。<br>​         no-repeat    背景图像将仅显示一次。<br>​         inherit    规定应该从父元素继承 background-repeat 属性的设置。   </p>
<p>​       background-attachment：设置背景图像是否固定或者随着页面的其余部分滚动。（属性值：①fixed   固定  ②scroll   滚动）</p>
<p>​       background-position：设置背景图像的开始位置。这个属性设置背景原图像（由 background-image 定义）的位置，背景图像如果要重复，将从这一点开始。您需要把 background-attachment属性设置为 “fixed”，才能保证该属性在 Firefox 和 Opera 中正常工作。<br>​          横向关键字： left center right<br>​          纵向关键字： top center bottom<br>​         百分比：左上角是 0% 0%。右下角是 100% 100%。</p>
<p>​       background ： 简写属性在一个声明中设置所有的背景属性。如：background:#ff0000 url(‘smiley.gif’) no-repeat; </p>
<p><strong>5  边框属性</strong><br>       border-style 设置4个边框的样式<br>         dotted    定义点状边框。在大多数浏览器中呈现为实线。<br>         solid    定义实线。<br>         double    定义双线。<br>         dashed 定义虚线。<br>         none    定义无边框<br>         …<br>         如果4个值都给定了，分别应用于上，右，下,左。如：border-style: solid dashed dashed solid;<br>         如果给定1个值，应用于各边; 如：border-style: solid;<br>         如果给定2个值，第一个值应用于上下边，第二个值应用于左右边。如： border-style: solid dashed; </p>
<p>​       border-width 设置4个边框的宽度<br>​       border-color 设置边框颜色<br>​       border 在一个声明设置所有的边框属性。如：order:1px solid #ff0000 </p>
<p><strong>6 鼠标光标属性</strong><br>       cursor   属性规定要显示的光标的类型（形状）。<br>         none   无<br>         auto    默认。浏览器设置的光标。<br>         pointer 光标呈现为指示链接的指针（一只手）<br>         wait    此光标指示程序正忙（通常是一只表或沙漏）。 </p>
<p>​         help    此光标指示可用的帮助（通常是一个问号或一个气球）。</p>
<p> <strong>7  列表属性</strong></p>
<p>​       list-style-image    将图象设置为列表项标记。 如：list-style-image:url(“/i/arrow.gif”);<br>​       list-style-position 设置列表项标记的放置位置。<br>​         inside    列表项目标记放置在文本以内，且环绕文本根据标记对齐。<br>​         outside 默认值。保持标记位于文本的左侧。列表项目标记放置在文本以外，且环绕文本不根据标记对齐。<br>​         在Firefox中的查看器中选中ul即可看出区别 </p>
<p>​       list-style-type    设置列表项标记的类型。<br>​         none    无标记。<br>​         disc    默认。标记是实心圆。<br>​         circle    标记是空心圆。<br>​         square    标记是实心方块。<br>​         decimal 标记是数字。<br>​         ower-roman   小写罗马数字(i, ii, iii, iv, v, 等。)<br>​         upper-roman   大写罗马数字(I, II, III, IV, V, 等。)<br>​         lower-alpha   小写英文字母The marker is lower-alpha (a, b, c, d, e, 等。)<br>​         upper-alpha   大写英文字母The marker is upper-alpha (A, B, C, D, E, 等。)<br>​         lower-latin   小写拉丁字母(a, b, c, d, e, 等。)<br>​         upper-latin   大写拉丁字母(A, B, C, D, E, 等。) </p>
<p>​       list-style      在一个声明中设置所有的列表属性。如：list-style: square inside url(‘/i/eg_arrow.gif’) </p>
<p> <strong>8  表格</strong><br>       优先级： td,th–&gt;tr–&gt;tbody,thead,tfoot–&gt;table (从里向外的规则)<br>       color,font-size<br>       text-align   文字对齐<br>       background<br>       border  边框，只能用于table,th,td<br>       margin  间距，只能用于table,caption<br>       padding 内间距，只能用于th,td<br>       width   宽，只能用于table,td,th<br>       height   高，只能用于table,td,th、可以用于tr并且优先级高于td<br>       caption-side 标题位置：top/left/right/botton </p>
<h1 id="五-盒子模型"><a href="#五-盒子模型" class="headerlink" title="五 盒子模型"></a>五 盒子模型</h1><p>​     网页就是由许多个盒子通过不同的排列方式堆积而成，网页上每个元素都被浏览器看成是一个矩形的盒子，这个盒子由元素的内容，填充，边框，边界组成。默认盒子边框无，背景色透明，默认看不到盒子 </p>
<h3 id="1-盒子模型"><a href="#1-盒子模型" class="headerlink" title="1  盒子模型"></a>1  盒子模型</h3><p>​       margin 外边距，定义区块外边界与上级元素距离的属性，值为长度<br>​       padding 内边距（填充），是设置区块的内边距的属性，是边框和元素内容之间的间隔距离<br>​       border 边框(注意边框是有内外俩条边界的)<br>​       width  盒子的宽度<br>​       height 盒子的高度<br>​       内容   盒子里面所包含的元素和内容 </p>
<p>​       属性值：<br>​         1个：上下左右都是该值<br>​         2个：前者表示上下的值，后者表示左右的值<br>​         3个：前者表示上边的值，中间表示左右的值，后者表示下边的值 </p>
<p>​         4个：上右下左，顺时针排序</p>
<h3 id="2-不同浏览器解析盒子模型的差异"><a href="#2-不同浏览器解析盒子模型的差异" class="headerlink" title="2  不同浏览器解析盒子模型的差异"></a>2  不同浏览器解析盒子模型的差异</h3><p>​       IE5盒子 width = 内容 + border + padding<br>​         盒子占据的宽度 = margin<em>2+width<br>​         盒子占据的高度 = margin</em>2+height<br>​         盒子实际的宽度 = width<br>​         盒子实际的高度 = height </p>
<p>​       W3C盒子 width = 内容<br>​         盒子占据的宽度 = margin<em>2+border</em>2+padding<em>2+width<br>​         盒子占据的高度 = margin</em>2+border<em>2+padding</em>2+height<br>​         盒子实际的宽度 = border<em>2+padding</em>2+width<br>​         盒子实际的高度 = border<em>2+padding</em>2+height </p>
<h3 id="3-设置浏览器去遵循w3c标准"><a href="#3-设置浏览器去遵循w3c标准" class="headerlink" title="3  设置浏览器去遵循w3c标准"></a>3  设置浏览器去遵循w3c标准</h3><p>​       只需要在网页的顶部加上DOCTYPE声明即可<br>​       另外注意 !important 的使用<br>​       p{<br>​         color:red !important;<br>​         color:blue;<br>​       }<br>​       当不加!important;的时候，后者覆盖前者，当加上之后说明第一个,样式优先级更高，采用前者，但是Ie6不支持!important; </p>
<h3 id="4-其他属性"><a href="#4-其他属性" class="headerlink" title="4 其他属性"></a>4 其他属性</h3><p>​       border-width   边框高度<br>​       border-color   边框颜色<br>​       border-style   边框样式<br>​         none   无样式<br>​         dotted   点线<br>​         dashed   虚线<br>​         solid   实线<br>​         double   双线<br>​         groove   槽线<br>​         ridge   脊线<br>​         inset   内凹<br>​         outset   外凸 </p>
<h3 id="5-关于填充和边框的常见问题"><a href="#5-关于填充和边框的常见问题" class="headerlink" title="5 关于填充和边框的常见问题"></a>5 关于填充和边框的常见问题</h3><p>​     \1. 大部分的html元素的盒子属性（margin,padding）默认值为0，有少数html元素的（marigin，padding不为0）例如：body,p,ul,li,form等标签，有时需要将其先设置为0<br>​     \2. 相邻两个兄弟元素的外边框会发生合并，一般浏览器会自动设定他们的外边距(注意我们可以margin设置为负值)<br>​     \3. 如果没有设置父级元素的内边距或边框，那么它的子元素的边界会和其合并。(注意边框是有内外俩条边界的)<br>​     \4. 设置一个块元素居中： marigin:0 auto;  （ 第一个表示top和bottom，第二个表示left和right）<br>​     \5. margin可以设置负值，padding不可以设置<br>​     \6. 行内元素的margin值，只有左右值，没有上下值 </p>
<h3 id="6-行内元素与块级元素"><a href="#6-行内元素与块级元素" class="headerlink" title="6 行内元素与块级元素"></a>6 行内元素与块级元素</h3><p>   <strong><em>\</em>行内元素**</strong><br>       行内元素不可以设置宽（width）和高（height【但是可以通过line-height设置】），但可以与其他行内元素位于同一行，行内元素内一般不可以包含块级元素。行内元素的高度一般由元素内部的字体大小决定，宽度由内容的长度控制。常见的行内元素有:em,font,b,span,a,strong </p>
<p>   <strong>块级元素</strong><br>       块级元素排斥其他元素与其位于同一行，可以设定元素的宽（width）和高（height），块级元素一般是其他元素的容器，可容纳块级元素和行内元素。常见的块级元素有div, p ,h1~h6等 </p>
<p>​         IE6/7及IE8混杂模式中(当IE浏览器识别不了DTD就会显示成混杂模式)，text- align:center可以使块级元素也居中对齐。其他浏览器中，text-align:center仅作用于行内内容上。 </p>
<p>​       改变元素类型：<br>​         display<br>​           可以将一个行级元素转换为块级元素，但是这种转换并不能改变元素本质，转换的只是CSS的盒子的外观<br>​           需要转换盒子类型的情况：<br>​           水平的列表菜单，不断行的标题，隐藏元素<br>​           none    隐藏元素。不会被显示，不占空间<br>​           block   块级元素。独占一行空间<br>​           inline 默认。此元素会被显示为内联元素，元素前后没有换行符。<br>​           inline-block   兼有块级和行级元素特性，在行内显示但是可以设定宽高 </p>
<p>​           list-item      此元素会作为列表显示。 </p>
<p>​           table    此元素会作为块级表格来显示（类似 <table>），表格前后带有换行符。<br>​           inline-table    此元素会作为内联表格来显示（类似 <table>），表格前后没有换行符。<br>​           table-row-group    此元素会作为一个或多个行的分组来显示（类似 <tbody>）。<br>​           table-header-group    此元素会作为一个或多个行的分组来显示（类似 <thead>）。<br>​           table-footer-group    此元素会作为一个或多个行的分组来显示（类似 <tfoot>）。<br>​           table-row      此元素会作为一个表格行显示（类似 <tr>）。<br>​           table-column    此元素会作为一个单元格列显示（类似 <col>）<br>​           table-cell      此元素会作为一个表格单元格显示（类似 <td> 和 <th>）<br>​           table-caption    此元素会作为一个表格标题显示（类似 <caption>）<br>​           inherit      规定应该从父元素继承 display 属性的值。<br>​         float,position<br>​           应用了浮动和绝对定位的元素，变成了块级元素，因此display属性一般被忽略<br>​         如果元素应用了display:none，该元素（以及子元素）被隐藏起来，对其再使用float,position将不再有意义 </p>
<h1 id="六-浮动-float"><a href="#六-浮动-float" class="headerlink" title="六  浮动 float"></a>六  浮动 float</h1><p>​     任何元素都可以浮动，可以改变普通文档流的排列方式，可以使得块元素在同一行中排列，使我们的布局更加方便，浮动是脱离文档流的，也就是其他元素看不见这个浮动的元素。浏览器将窗体自上而下分成一行一行,并在每行中按从左至右的挨次排放元素,即为文档流。 </p>
<p>​     浮动何时停止？<br>​       \1. 当遇到一个浮动元素后<br>​       \2. 当遇到父级元素后<br>​     多个盒子都浮动后，就产生了块级元素水平排列的效果。 多个浮动元素不会相互覆盖。 若包含的容器太窄，无法容纳水平排列的多个浮动元素，那么最后的浮动盒子会向下移动，但如果浮动元素的高度不同，那么它们向下移动时可能会被卡住。 </p>
<p>​     float:<br>​       left    元素向左浮动。<br>​       right    元素向右浮动。<br>​       none    默认值。元素不浮动，并会显示在其在文本中出现的位置。 </p>
<h1 id="七-定位-position"><a href="#七-定位-position" class="headerlink" title="七 定位 position"></a>七 定位 position</h1><p>​     定位属性：<br>​       <strong>相对定位 relative:</strong> 参照元素原来的位置进行移动，元素原来的空间位不变，元素在移动时会覆盖其他元素。<br>​       <strong><em>\</em>固定定位 fixed\</strong>:** 将元素固定在窗口中的某个位置，绝对定位是相对于元素的，固定定位是相对于窗口的，会随着窗口的一定而移动。在低版本IE中不支持该属性<br>​       <strong><em>\</em>绝对定位 absolute:**</strong>元素完全脱离文档流，页面中的其他元素视它不存在，绝对定位元素不会影响到其他元素。绝对定位是参照距离他最近的父级有定位属性的元素，如果父级元素没有定位属性，则会参照文档<br>​       <strong>默认定位 static：</strong>默认属性，指定了元素按照常规的文档流进行定位，静态定位元素不允许使用top,left和类似其他属性定位。position的值为static为非定位元素，为其他值时候为定位元素，因为static元素不能自定义元素的位置，而其他可以 </p>
<p>​     top: 层距离页面顶点纵坐标的距离<br>​     left: 层距离页面定点横坐标的距离<br>​     text-align:   横向排列 left right center<br>​     line-height:行高，内容都在行的中间，可以使用这个属性设置内容垂直居中<br>​     z-index ： 第三个维度 ，值高的元素会覆盖值低的元素。该属性可以使得元素脱离文档流，可能会覆盖其他元素。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
</search>
